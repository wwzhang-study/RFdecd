use_package("matrixStats")
library(devtools)
use_package("matrixStats")
use_package("matrixStats")
use_package("matrixStats")
use_package("matrixStats")
use_package("matrixStats")
devtools::load_all()
ls()
findRefinxCV
devtools::load_all()
findRefinx.CV
usethis::use_mit_license()
devtools::check()
roxygenize("/Users/wwzhang/Documents/GitHub/RFdecd")
roxygen2::roxygenize("/Users/wwzhang/Documents/GitHub/RFdecd")
devtools::document()
devtools::check()
use_readme_rmd()
build()
use_package("deconf")
use_package("RefFreeEWAS")
use_package("RefFreeEWAS")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
install.packages("RefFreeEWAS")
install.packages("~/Documents/RefFreeEWAS_2.2.tar.gz", repos = NULL, type = "source")
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
use_readme_rmd()
build_readme()
devtools::check()
build()
devtools::load_all()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
build_readme()
build()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
devtools::load_all()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
build_readme()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
build_readme()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
build_readme()
build()
devtools::install()
library(RFdecd)
ls()
load("/Users/wwzhang/Documents/Project/featureSelection/20240915/data/immune.rda")
source("/Users/wwzhang/Documents/Project/featureSelection/20240915/code/sim_functions_GeneExp.R")
sim_data <- getSampleMix(N_sample = 100, logpure, logpure.sd, noise_sd = 0.1)
Y.raw <- sim_data$obs.Y
trueProp = sim_data$trueProp
trueExp = sim_data$tmp
K = ncol(trueProp)
Y_raw = Y.raw
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30,
bound_negative = FALSE)
library(matrixStats)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30,
bound_negative = FALSE)
library(deconf)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_VAR,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_CV,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_pairwise,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_1VSother,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_2VSother,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
load_all()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
ls()
if (!require("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github('wwzhang-study/RFdecd', dependencies=T, build_vignettes = T)
devtools::install_github('https://github.com/wwzhang-study/RFdecd', dependencies=T, build_vignettes = T)
devtools::install_github('https://github.com/wwzhang-study/RFdecd', dependencies=T, build_vignettes = T)
dim(Y_raw)
install.packages("~/Documents/GitHub/RFdecd_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(RFdecd)
N <- 100 # Simulate a DNA methylation dataset with 100 samples
K <- 4 # 4 cell types
P <- 5000 # 5000 CpG sites
## Simulate proportion matrix
Hmat <- matrix(runif(N*K), ncol = K)
Hmat <- sweep(Hmat, 1, rowSums(Hmat), FUN="/")
## Simulate reference matrix
Wmat <- matrix(rbeta(P*K,2,5), P, K)
Y_raw <- Wmat %*% t(Hmat) + rnorm(N*K,sd = 0.1)
rownames(Y_raw) = paste0("CpG",1:nrow(Y_raw))
colnames(Y_raw) <- paste0("Sample", 1:N)
res_RFdecd <- RFdeconv(DataType = "DNA methylation",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3)
remotes::install_github("andrewhooker/deconf@v1.2.3")
if (!require("remotes"))
install.packages("remotes")
if (!require("devtools")) install.packages("devtools")
if (!require("remotes")) install.packages("remotes")
if (!require("RefFreeEWAS")) {
install.packages(
"https://cran.r-project.org/src/contrib/Archive/RefFreeEWAS/RefFreeEWAS_2.2.tar.gz",
repos = NULL,
type = "source"
)
}
remotes::install_github("andrewhooker/deconf@v1.2.3")
remotes::install_github("andrewhooker/deconf")
library(deconf)
remotes::install_github("andrewhooker/deconf")
if (!require("RefFreeEWAS")) {
install.packages(
"https://cran.r-project.org/src/contrib/Archive/RefFreeEWAS/RefFreeEWAS_2.2.tar.gz",
repos = NULL,
type = "source"
)
}
library(RefFreeEWAS)
### Step 2: Install RFdecd
devtools::install_github(repo = "wwzhang-study/RFdecd",dependencies = TRUE,build_vignettes = TRUE,upgrade = "never")
install.packages("/Users/wwzhang/Desktop/deconf_1.0.1.tar.gz", repos = NULL, type = "source")
library(deconf)
install.packages(
url = "https://github.com/wwzhang-study/RFdecd/tree/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
N <- 100 # Simulate a gene expression dataset with 100 samples
K <- 4 # 4 cell types
P <- 5000 # 5000 features
## Simulate proportion matrix
Hmat <- matrix(runif(N*K), ncol = K)
Hmat <- sweep(Hmat, 1, rowSums(Hmat), FUN="/")
## Simulate reference matrix
Wmat <- matrix(abs(rnorm(P*K, 4, 4)), P, K)
## Simulate mixed expression profiles
Y_raw <- Wmat %*% t(Hmat) + abs(rnorm(N*K))
rownames(Y_raw) = paste0("gene",1:nrow(Y_raw))
colnames(Y_raw) <- paste0("Sample", 1:100)
# Run RFdecd for gene expression data
res_RFdecd <- RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30)
library(RFdecd)
N <- 100 # Simulate a gene expression dataset with 100 samples
K <- 4 # 4 cell types
P <- 5000 # 5000 features
## Simulate proportion matrix
Hmat <- matrix(runif(N*K), ncol = K)
Hmat <- sweep(Hmat, 1, rowSums(Hmat), FUN="/")
## Simulate reference matrix
Wmat <- matrix(abs(rnorm(P*K, 4, 4)), P, K)
## Simulate mixed expression profiles
Y_raw <- Wmat %*% t(Hmat) + abs(rnorm(N*K))
rownames(Y_raw) = paste0("gene",1:nrow(Y_raw))
colnames(Y_raw) <- paste0("Sample", 1:100)
# Run RFdecd for gene expression data
res_RFdecd <- RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30)
dim(Y_raw)
res_RFdecd <- RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30)
if (!require("devtools")) install.packages("devtools")
library(devtools)
devtools::document()
rmarkdown::render("README.Rmd")
devtools::check()
devtools::document()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
install.packages("~/Documents/GitHub/RFdecd_1.0.1.tar.gz", repos = NULL, type = "source")
library(RFdecd)
N <- 100 # Simulate a gene expression dataset with 100 samples
K <- 4 # 4 cell types
P <- 5000 # 5000 features
## Simulate proportion matrix
Hmat <- matrix(runif(N*K), ncol = K)
Hmat <- sweep(Hmat, 1, rowSums(Hmat), FUN="/")
## Simulate reference matrix
Wmat <- matrix(abs(rnorm(P*K, 4, 4)), P, K)
## Simulate mixed expression profiles
Y_raw <- Wmat %*% t(Hmat) + abs(rnorm(N*K))
rownames(Y_raw) = paste0("gene",1:nrow(Y_raw))
colnames(Y_raw) <- paste0("Sample", 1:100)
# Run RFdecd for gene expression data
res_RFdecd <- RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3)
N <- 100 # Simulate a DNA methylation dataset with 100 samples
K <- 4 # 4 cell types
P <- 5000 # 5000 CpG sites
## Simulate proportion matrix
Hmat <- matrix(runif(N*K), ncol = K)
Hmat <- sweep(Hmat, 1, rowSums(Hmat), FUN="/")
## Simulate reference matrix
Wmat <- matrix(rbeta(P*K,2,5), P, K)
## Simulate mixed methylation data
Y_raw <- Wmat %*% t(Hmat) + rnorm(N*K,sd = 0.1)
rownames(Y_raw) = paste0("CpG",1:nrow(Y_raw))
colnames(Y_raw) <- paste0("Sample", 1:N)
res_RFdecd <- RFdeconv(DataType = "DNA methylation",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3)
devtools::document()
devtools::check()
devtools::build()
# Install development tools
if (!require("remotes")) install.packages("remotes")
if (!require("devtools")) install.packages("devtools")
install.packages(
"https://cran.r-project.org/src/contrib/Archive/RefFreeEWAS/RefFreeEWAS_2.2.tar.gz",
repos = NULL,
type = "source"
)
# Install deconf from GitHub repository
install.packages(
"https://raw.githubusercontent.com/wwzhang-study/RFdecd/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
# Install deconf from GitHub repository
install.packages(
"https://wwzhang-study/RFdecd/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
# Install deconf from GitHub repository
install.packages(
"https://raw.githubusercontent.com/wwzhang-study/RFdecd/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
devtools::install_github(repo = "wwzhang-study/RFdecd",dependencies = TRUE,build_vignettes = TRUE,upgrade = "never")
library(RFdecd)
install.packages(
"https://github.com/wwzhang-study/RFdecd/tree/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
install.packages(
"https://github.com/wwzhang-study/RFdecd/tree/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
install.packages("~/Desktop/deconf_1.0.1.tar.gz", repos = NULL, type = "source")
library(deconf)
install.packages(
"https://cran.r-project.org/src/contrib/Archive/RefFreeEWAS/RefFreeEWAS_2.2.tar.gz",
repos = NULL,
type = "source"
)
library(RefFreeEWAS)
install.packages(
"https://github.com/wwzhang-study/RFdecd/tree/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
# Install development tools
if (!require("remotes")) install.packages("remotes")
if (!require("devtools")) install.packages("devtools")
# Install archived RefFreeEWAS package
install.packages(
"https://cran.r-project.org/src/contrib/Archive/RefFreeEWAS/RefFreeEWAS_2.2.tar.gz",
repos = NULL,
type = "source"
)
# Install deconf from GitHub repository
install.packages(
"https://github.com/wwzhang-study/RFdecd/tree/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
install.packages(
"https://github.com/wwzhang-study/RFdecd/tree/main/deps/deconf_1.0.1.tar.gz",
repos = NULL,
type = "source"
)
devtools::install_github(repo = "wwzhang-study/RFdecd",dependencies = TRUE,build_vignettes = TRUE,upgrade = "never")
library(RFdecd)
N <- 100 # Simulate a gene expression dataset with 100 samples
K <- 4 # 4 cell types
P <- 5000 # 5000 features
## Simulate proportion matrix
Hmat <- matrix(runif(N*K), ncol = K)
Hmat <- sweep(Hmat, 1, rowSums(Hmat), FUN="/")
## Simulate reference matrix
Wmat <- matrix(abs(rnorm(P*K, 4, 4)), P, K)
## Simulate mixed expression profiles
Y_raw <- Wmat %*% t(Hmat) + abs(rnorm(N*K))
rownames(Y_raw) = paste0("gene",1:nrow(Y_raw))
colnames(Y_raw) <- paste0("Sample", 1:100)
res_RFdecd <- RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 2)
head(res_RFdecd$estProp)
![Figure 1: RFdecd Workflow](https://raw.githubusercontent.com/wwzhang-study/RFdecd/main/figures/Fig1.png)
# Install development tools
if (!require("remotes")) install.packages("remotes")
if (!require("devtools")) install.packages("devtools")
# Install required dependencies
install.packages(c("quadprog","corpcor"))
# Install archived RefFreeEWAS package
install.packages(
"https://cran.r-project.org/src/contrib/Archive/RefFreeEWAS/RefFreeEWAS_2.2.tar.gz",
repos = NULL,
type = "source"
)
devtools::install_github(repo = "wwzhang-study/RFdecd",dependencies = TRUE,build_vignettes = TRUE,upgrade = "never")
library(RFdecd)
devtools::document()
devtools::check()
install.packages("csSAM")
install.packages("csSAM")
