use_package("matrixStats")
library(devtools)
use_package("matrixStats")
use_package("matrixStats")
use_package("matrixStats")
use_package("matrixStats")
use_package("matrixStats")
devtools::load_all()
ls()
findRefinxCV
devtools::load_all()
findRefinx.CV
usethis::use_mit_license()
devtools::check()
roxygenize("/Users/wwzhang/Documents/GitHub/RFdecd")
roxygen2::roxygenize("/Users/wwzhang/Documents/GitHub/RFdecd")
devtools::document()
devtools::check()
use_readme_rmd()
build()
use_package("deconf")
use_package("RefFreeEWAS")
use_package("RefFreeEWAS")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
install.packages("RefFreeEWAS")
install.packages("~/Documents/RefFreeEWAS_2.2.tar.gz", repos = NULL, type = "source")
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
use_readme_rmd()
build_readme()
devtools::check()
build()
devtools::load_all()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
build_readme()
build()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
devtools::load_all()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
build_readme()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
build_readme()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
devtools::check()
use_readme_rmd()
build_readme()
build()
devtools::install()
library(RFdecd)
ls()
load("/Users/wwzhang/Documents/Project/featureSelection/20240915/data/immune.rda")
source("/Users/wwzhang/Documents/Project/featureSelection/20240915/code/sim_functions_GeneExp.R")
sim_data <- getSampleMix(N_sample = 100, logpure, logpure.sd, noise_sd = 0.1)
Y.raw <- sim_data$obs.Y
trueProp = sim_data$trueProp
trueExp = sim_data$tmp
K = ncol(trueProp)
Y_raw = Y.raw
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30,
bound_negative = FALSE)
library(matrixStats)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30,
bound_negative = FALSE)
library(deconf)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_RFdecd,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 30,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_VAR,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_CV,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_pairwise,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_1VSother,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
RFdeconv(DataType = "Gene expression",
Y_raw,
K,
CTSoption = DEVarSelect_2VSother,
nMarker = 1000,
InitMarker = NULL,
TotalIter = 3,
bound_negative = FALSE)
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
load_all()
devtools::load_all()
usethis::use_mit_license()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
ls()
if (!require("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github('wwzhang-study/RFdecd', dependencies=T, build_vignettes = T)
devtools::install_github('https://github.com/wwzhang-study/RFdecd', dependencies=T, build_vignettes = T)
devtools::install_github('https://github.com/wwzhang-study/RFdecd', dependencies=T, build_vignettes = T)
dim(Y_raw)
install.packages("~/Documents/GitHub/RFdecd_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(RFdecd)
